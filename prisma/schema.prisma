generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String    @map("first_name")
  lastName  String    @map("last_name")
  email     String    @unique
  phone     String
  password  String
  isAdmin   Boolean   @default(false) @map("is_admin")
  pets      Pet[]     @relation("OwnedPets")
  savedPets Pet[]     @relation("SavedPets")
  events    Event[]
  Chat      Chat[]
  Issue     Issue[]
  Comment   Comment[]

  @@map("users")
}

model Pet {
  id             Int         @id @default(autoincrement())
  type           PetType
  name           String
  adoptionStatus AdoptStatus @map("adoption_status")
  picture        String
  height         Float
  weight         Float
  color          String
  dietary        String?
  bio            String?
  hypoallergenic Boolean
  breed          String?
  owner          User?       @relation("OwnedPets", fields: [ownerId], references: [id])
  ownerId        Int?        @map("owner_id")
  saved_by       User[]      @relation("SavedPets")
  events         Event[]

  @@fulltext([name])
  @@map("pets")
}

model Event {
  id        Int          @id @default(autoincrement())
  type      EventType
  time      DateTime     @default(now())
  author    User         @relation(fields: [authorId], references: [id])
  authorId  Int          @map("author_id")
  pet       Pet?         @relation(fields: [petId], references: [id])
  petId     Int?         @map("pet_id")
  newStatus AdoptStatus?

  @@map("events")
}

model Chat {
  id       Int      @id @default(autoincrement())
  time     DateTime @default(now())
  chatId   Int      @map("chat_id")
  authorId Int      @map("author_id")
  author   User     @relation(fields: [authorId], references: [id])
  message  String
}

model Issue {
  id       Int       @id @default(autoincrement())
  time     DateTime  @default(now())
  title    String
  text     String    @db.MediumText
  authorId Int       @map("author_id")
  author   User      @relation(fields: [authorId], references: [id])
  comments Comment[]

  @@map("issues")
}

model Comment {
  id       Int      @id @default(autoincrement())
  time     DateTime @default(now())
  text     String   @db.MediumText
  authorId Int      @map("author_id")
  author   User     @relation(fields: [authorId], references: [id])
  issueId  Int      @map("issue_id")
  issue    Issue    @relation(fields: [issueId], references: [id])

  @@map("comments")
}

enum EventType {
  NewUser
  NewPet
  PetUpdate
  Login
  NewPetStatus
}

enum PetType {
  Dog
  Cat
  Other
}

enum AdoptStatus {
  Adopted
  Available
  Fostered
}
